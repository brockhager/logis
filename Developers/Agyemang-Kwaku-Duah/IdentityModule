using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Web.Mvc;

namespace Logis.Models
{
    // You can add profile data for the user by adding more properties to your ApplicationUser class, please visit http://go.microsoft.com/fwlink/?LinkID=317594 to learn more.
    public class ApplicationUser : IdentityUser
    {
    
    //Adds the following properties to the default properties
        [Required(AllowEmptyStrings = false, ErrorMessage = "{0} is required")]
        [StringLength(500, MinimumLength = 5, ErrorMessage = "{0} should be between {1} and {2} characters")]
        [Index(IsUnique =true)]
    // use to verify that the company name is unique. With JQuery validation, it will automagically set the form as invalid
    //a directive will have to be used in angular or use angularLoad on the page to load the jquery validations script
        [Remote(action:"Accounts",controller:"Accounts")]
        public string Company { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "{0} is required")]
        [StringLength(100, MinimumLength = 4, ErrorMessage = "{0} should be between {1} and {2} characters")]
        public string Country { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "{0} is required")]
        [StringLength(100, MinimumLength = 5, ErrorMessage = "{0} should be between {1} and {2} characters")]
        public string Region { get; set; }
        public async Task<ClaimsIdentity> GenerateUserIdentityAsync(UserManager<ApplicationUser> manager)
        {
            // Note the authenticationType must match the one defined in CookieAuthenticationOptions.AuthenticationType
            var userIdentity = await manager.CreateIdentityAsync(this, DefaultAuthenticationTypes.ApplicationCookie);
            // Add custom user claims here
            return userIdentity;
        }
    }

    public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
    {
        public ApplicationDbContext()
            : base("DefaultConnection", throwIfV1Schema: false)
        {
        }

        public static ApplicationDbContext Create()
        {
            return new ApplicationDbContext();
        }
    }
}
